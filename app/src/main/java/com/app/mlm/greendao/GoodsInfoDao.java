package com.app.mlm.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.app.mlm.bean.GoodsInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_INFO".
*/
public class GoodsInfoDao extends AbstractDao<GoodsInfo, Long> {

    public static final String TABLENAME = "GOODS_INFO";

    public GoodsInfoDao(DaoConfig config) {
        super(config);
    }


    public GoodsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MDSE_ID\" INTEGER NOT NULL ," + // 1: mdseId
                "\"MDSE_PRICE\" TEXT," + // 2: mdsePrice
                "\"MDSE_BRAND\" TEXT," + // 3: mdseBrand
                "\"MDSE_PACK\" TEXT," + // 4: mdsePack
                "\"MERCHANT_TYPE\" TEXT," + // 5: merchantType
                "\"MDSE_NAME\" TEXT," + // 6: mdseName
                "\"MDSE_URL\" TEXT," + // 7: mdseUrl
                "\"CL_CODE\" TEXT," + // 8: clCode
                "\"CL_CAPACITY\" INTEGER NOT NULL ," + // 9: clCapacity
                "\"CLC_CAPACITY\" INTEGER NOT NULL ," + // 10: clcCapacity
                "\"GAME_PRICE\" TEXT," + // 11: gamePrice
                "\"GAME_TIME_START\" TEXT," + // 12: gameTimeStart
                "\"GAME_TIME_END\" TEXT," + // 13: gameTimeEnd
                "\"POSITION\" INTEGER NOT NULL ," + // 14: position
                "\"SHOP_CAR_NUM\" INTEGER NOT NULL );"); // 15: shopCarNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMdseId());

        String mdsePrice = entity.getMdsePrice();
        if (mdsePrice != null) {
            stmt.bindString(3, mdsePrice);
        }

        String mdseBrand = entity.getMdseBrand();
        if (mdseBrand != null) {
            stmt.bindString(4, mdseBrand);
        }

        String mdsePack = entity.getMdsePack();
        if (mdsePack != null) {
            stmt.bindString(5, mdsePack);
        }

        String merchantType = entity.getMerchantType();
        if (merchantType != null) {
            stmt.bindString(6, merchantType);
        }

        String mdseName = entity.getMdseName();
        if (mdseName != null) {
            stmt.bindString(7, mdseName);
        }

        String mdseUrl = entity.getMdseUrl();
        if (mdseUrl != null) {
            stmt.bindString(8, mdseUrl);
        }

        String clCode = entity.getClCode();
        if (clCode != null) {
            stmt.bindString(9, clCode);
        }
        stmt.bindLong(10, entity.getClCapacity());
        stmt.bindLong(11, entity.getClcCapacity());

        String gamePrice = entity.getGamePrice();
        if (gamePrice != null) {
            stmt.bindString(12, gamePrice);
        }

        String gameTimeStart = entity.getGameTimeStart();
        if (gameTimeStart != null) {
            stmt.bindString(13, gameTimeStart);
        }

        String gameTimeEnd = entity.getGameTimeEnd();
        if (gameTimeEnd != null) {
            stmt.bindString(14, gameTimeEnd);
        }
        stmt.bindLong(15, entity.getPosition());
        stmt.bindLong(16, entity.getShopCarNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GoodsInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMdseId());

        String mdsePrice = entity.getMdsePrice();
        if (mdsePrice != null) {
            stmt.bindString(3, mdsePrice);
        }

        String mdseBrand = entity.getMdseBrand();
        if (mdseBrand != null) {
            stmt.bindString(4, mdseBrand);
        }

        String mdsePack = entity.getMdsePack();
        if (mdsePack != null) {
            stmt.bindString(5, mdsePack);
        }

        String merchantType = entity.getMerchantType();
        if (merchantType != null) {
            stmt.bindString(6, merchantType);
        }

        String mdseName = entity.getMdseName();
        if (mdseName != null) {
            stmt.bindString(7, mdseName);
        }

        String mdseUrl = entity.getMdseUrl();
        if (mdseUrl != null) {
            stmt.bindString(8, mdseUrl);
        }

        String clCode = entity.getClCode();
        if (clCode != null) {
            stmt.bindString(9, clCode);
        }
        stmt.bindLong(10, entity.getClCapacity());
        stmt.bindLong(11, entity.getClcCapacity());

        String gamePrice = entity.getGamePrice();
        if (gamePrice != null) {
            stmt.bindString(12, gamePrice);
        }

        String gameTimeStart = entity.getGameTimeStart();
        if (gameTimeStart != null) {
            stmt.bindString(13, gameTimeStart);
        }

        String gameTimeEnd = entity.getGameTimeEnd();
        if (gameTimeEnd != null) {
            stmt.bindString(14, gameTimeEnd);
        }
        stmt.bindLong(15, entity.getPosition());
        stmt.bindLong(16, entity.getShopCarNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public GoodsInfo readEntity(Cursor cursor, int offset) {
        GoodsInfo entity = new GoodsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // mdseId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mdsePrice
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mdseBrand
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mdsePack
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // merchantType
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mdseName
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mdseUrl
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // clCode
                cursor.getInt(offset + 9), // clCapacity
                cursor.getInt(offset + 10), // clcCapacity
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gamePrice
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // gameTimeStart
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // gameTimeEnd
                cursor.getInt(offset + 14), // position
                cursor.getInt(offset + 15) // shopCarNum
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, GoodsInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMdseId(cursor.getInt(offset + 1));
        entity.setMdsePrice(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMdseBrand(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMdsePack(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMerchantType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMdseName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMdseUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClCode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClCapacity(cursor.getInt(offset + 9));
        entity.setClcCapacity(cursor.getInt(offset + 10));
        entity.setGamePrice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setGameTimeStart(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGameTimeEnd(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPosition(cursor.getInt(offset + 14));
        entity.setShopCarNum(cursor.getInt(offset + 15));
     }

    @Override
    protected final Long updateKeyAfterInsert(GoodsInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GoodsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GoodsInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity GoodsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MdseId = new Property(1, int.class, "mdseId", false, "MDSE_ID");
        public final static Property MdsePrice = new Property(2, String.class, "mdsePrice", false, "MDSE_PRICE");
        public final static Property MdseBrand = new Property(3, String.class, "mdseBrand", false, "MDSE_BRAND");
        public final static Property MdsePack = new Property(4, String.class, "mdsePack", false, "MDSE_PACK");
        public final static Property MerchantType = new Property(5, String.class, "merchantType", false, "MERCHANT_TYPE");
        public final static Property MdseName = new Property(6, String.class, "mdseName", false, "MDSE_NAME");
        public final static Property MdseUrl = new Property(7, String.class, "mdseUrl", false, "MDSE_URL");
        public final static Property ClCode = new Property(8, String.class, "clCode", false, "CL_CODE");
        public final static Property ClCapacity = new Property(9, int.class, "clCapacity", false, "CL_CAPACITY");
        public final static Property ClcCapacity = new Property(10, int.class, "clcCapacity", false, "CLC_CAPACITY");
        public final static Property GamePrice = new Property(11, String.class, "gamePrice", false, "GAME_PRICE");
        public final static Property GameTimeStart = new Property(12, String.class, "gameTimeStart", false, "GAME_TIME_START");
        public final static Property GameTimeEnd = new Property(13, String.class, "gameTimeEnd", false, "GAME_TIME_END");
        public final static Property Position = new Property(14, int.class, "position", false, "POSITION");
        public final static Property ShopCarNum = new Property(15, int.class, "shopCarNum", false, "SHOP_CAR_NUM");
    }
    
}
